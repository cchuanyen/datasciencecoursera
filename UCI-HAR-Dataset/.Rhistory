rm(list=1s())
rm(list=ls())
dir ()
dir ()
hwl[47]
hw1[47]
hw1 [47]
q()
getwd()
dir()
hw1=read.csv('hwl-data.csv')
names(hw1)
hw1=read.csv('hw1_data.csv')
names(hw1)
nrow(hw1)
mine=subset(hw1,is.naozone))
mine=subset(hw1,is.na ozone))
q()
x <- vector()
y <- list(1, "a", TRUE)
class(y)
x[[1]]
y[[1]]
y[1]
z <- list(var1 = 1:4, var2 = 0.6)
z <- list(var1 = 3, var2 = 0.6, var3 = 3)
class(z)
z[[1]]
z$var1
class(y[1])
class(y[[1]])
x <- matrix(1:6, nrow=2, ncol=3)
x <- matrix(1:6, nrow=4, ncol=3)
x
x <- matrix(1:6, nrow=2, ncol=3)
x
x <- matrix(1:6, nrow=2, ncol=2)
x
x[2,1]
x[2, ]
x[2,]
x <- c(1,2,3,4,NA,0/0)
class(x)
x
is.na(x)
is.nan(x)
!is.na(x)
x <- c("a", "b", "c", "d", "e")
data <- data.frame(x,y)
view(d.f)
View(df)
View(df)
x < 1:5
y <- c("a", "b", "c", "d", "e")
df <- data.frame(x,y)
View(d.f)
View(df)
if(x == "a"){}
if(x == "a") {}
count <- 0
while(count < 10){}
today <- "10/6/2015"
class(today)
today.date <- as.Data(taddy, "%m/%d/%y")
today.date <- as.Data(today, "%m/%d/%y")
today.date <- as.Date(today, "%m/%d/%y")
today.date
class(today.date)
x <- Sys.time()
x
paste(a", "b", sep="")
exit
cube <- function(x, n) {}
cube <- function(x, n) { }
cube <- function(x, n) {
cube <- function(x, n) { x^3 }
x <- 1:10
if(x > 5) {}
if(x > 5) { x <- 0 }
f <- function(x) {}
f <- function(x) { g<- function(y) { y + z}
getwd()
dir()
getwd()
cd
cd dir
setwd()
setwd()
getwd()
pollutantmean <- function(directory, pollutant, id = 1:332){}
pollutantmean <- function(directory, pollutant, id = 1:332){ }
source('C:/Users/CECILIA/Cecilia\'s/Data Science/R script.R')
setwd()
getwd
getwd()
setwd()
dir()
df
read.csv("001.csv")
x <- list(a=1:5, b=6:10)
lappy(x, mean)
lapply(x, mean)
lapply(x, sum)
lapply(x, min)
lapply(x, max)
lapply(x, min)
x <- list(a=matrix(1:4, 2, 2), b=matrix(1:6,3,2))
lapply(x, function(x) x[,1]/2)
print(x)
lapply(x, function(x) x[1:3]/2)
lapply(x, function(x) x[1:3, ]/2)
lapply(x, function(x) x[,1]/2)
sapply(x, function(x) x[,1]/2)
split(dt, dt$name)
name<-c("ting","ting","ting","chong","chong","chong")
subject<-c("IT","CS","AI","IT","CS,"AI"")
subject<-c("IT","CS","AI", "IT","CS,"AI"")
subject<-c("IT","CS","AI", "IT","CS,"AI")
subject<-c ("IT","CS","AI", "IT","CS","AI")
marks<-c(90,95,80,90,99,85)
dt<-data.frame(name,subject,marks)
dt
tapply(dt$marks,dt$subject,sum)
split(dt,dt$name)
split(dt,dt$subject)
rowMeans(iris[, 1:4])
colMeans(iris[,1:4])
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(iris)
?iris
list
tapply(mtcars$mpg,mtcars$cyl,mean)
with(mtcars,tapply(mpg,cyl,mean))
split(mtcars,mtcars$cyl)
lapply(mtcars,mean)
x <- rnorm(1000)
summary(x)
sample(10)
sample(10)
sample(10)
set.seed()
set.seed(1)
sample(10)
sample(10)
sample(10)
set.seed(1)
sample(10)
set.seed(2)
x <- rep(0:2, each = 3)
e <- rnorm(9, 0, 20) # Generate 9 random numbers
y <- 0.5 + 2 * x + e
Rprof()
system.time()
library(datasets)
Rprof()
fit <- lm(y ~ x + e)
summaryRprof()
library(virginica)
tapply(iris$Sepal.Length, iris$Species, mean)
fast <- function(f){}
fast <- function(f){
return(f+1)
}
slow <- function(g)
}
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
mean(mtcars$mpg.mtcars$cyl)
mean(mtcars$mpg,mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg,mtcars$cyl,mean)
split(mtcars,mtcars$cyl)
lapply(mtcars,mean)
source("lexical.R")
x <- 10
f <- function(x){}
f <- function(x){ }
myfn <- function(x, column){ }
myfn <- function(x, column){ }
myfn <- function(x, column){ }
tapply(mtcars$mpg,mtcars$cyl,mean)
myfn <- function(x, column){
for ( i in length(x[column]){
myfn <- function(x, column){
for ( i in length(x[,column])
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
## best.R
best <- function(state, outcome){
## Read outcome data
data <- read.csv("./ProgAssignment3-data/outcome-of-care-measures.csv", colclasses = "character", na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack", "heart failure", "pneumonia")
if (!outcome %in% validOutcome) { stop ("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullcolName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## Return hospital name in that state with lowest 30-day death rate
data.state <- data[data$State==state]
idx <- which.min(as.double(data.state[,colName]))
data.state[idx,"Hospital.Name"]
}
source("best.R")
best("TX", "heart attack")
best("TX", "heart failture")
best("TX", "heart failure")
x <- if (outcome=="heart attack")
x <- if (outcome=="heart attack") {outcomeCSV[,c(2,7,11)]}
x <- if (outcome=="heart attack") {outcomeCSV[,c(2,7,11)]}
x <- subset(x,!is.na(x[,3]))
getwd()
setwd()
getwd()
if (!file.exists("data")){
dir.create("data")
}
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov.NGAP.xlsx"
download.file(fileURL, destfile=("./data/%2Fdata%2FDATA.gov.NGAP.xlsx"))
download.file(fileURL, destfile=("./data/getdata%2Fdata%2FDATA.gov.NGAP.xlsx"))
download.file(fileURL, destfile=("./data/getdata%2Fdata%2FDATA.gov.NGAP.xlsx"))
download.file(fileURL, destfile=("./data/getdata%2Fdata%2FDATA.gov.NGAP.xlsx"))
Sys.setenv(JAVA_home="C:\Program Files\Java\jre7")
Sys.setenv(JAVA_HOME="C:\\Program Files\Java\jre7")
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre7")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov.NGAP.xlsx"
download.file(fileURL, destfile=("./data/getdata%2Fdata%2FDATA.gov.NGAP.xlsx"))
download.file(fileURL, destfile=("./data/getdata%2Fdata%2FDATA.gov.NGAP.xlsx"))
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre7")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov.NGAP.xlsx"
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre7")
library(JAVA)
library(xlsx)
library(Java)
fileURL <- "https://www.google.com/finance?q=NASDAQ%3AAAPL&ei=ykGKVaPlPMSsugS66bOIAw"
download.file(fileURL, destfile=("./data/apple.csv"))
list.files("./data")
fileURL <- "http://data.gov.my/folders/MOT/penumpang_mengikut_lapangan_terbang_tidak_termasuk_penumpang_transit.xlsx"
download.file("http://data.gov.my/folders/MOT/penumpang_mengikut_lapangan_terbang_tidak_termasuk_penumpang_transit.xlsx", destfile=("./data/passengers.xlsx"))
?read.table
read.csv
download.file("http://finance.yahoo.com/q/hp?s=GMALF+Historical+Prices"))
fileURL <- "http://finance.yahoo.com/q/hp?s=GMALF+Historical+Prices"
download.file("http://finance.yahoo.com/q/hp?s=GMALF+Historical+Prices", destfile=("./data/genting.csv"))
read.csv
read.table
if(!file.exists("data")){dir.create("data")}
fileUrl <- "https://data.baltimorecity.gov/Transportation/Baltimore-Fixed-Speed-Cameras/dz54-2aru/row.xlsx?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/cameras.xlsx")
fileUrl <- "https://data.baltimorecity.gov/Transportation/Baltimore-Fixed-Speed-Cameras/dz54-2aru/row.xlsx?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/cameras.xlsx")
if(!file.exists("data")){dir.create("data")}
fileUrl <- "https://data.baltimorecity.gov/Transportation/Baltimore-Fixed-Speed-Cameras/dz54-2aru/row.xlsx?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/cameras.xlsx")
library(httr)
install.packages("stringi)
library(httr)
hurl <- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- url(hurl)
htmlCode <- readLines(con)
close(con)
sapply(htmlCode[c(10, 20, 30, 100)], nchar)
#<meta name="Distribution" content="Global"/>
data <- read.csv("./getdata-wksst8110.for", header=T)
getwd()
getwd("C:\Users\cecilc\Documents\data")
getwd("C:/Users/cecilc/Documents/data")
getwd()
data <- read.csv("./getdata-wksst8110.for", header=T)
updateR()
R.Version()$arch
system("java -version")
Sys.setenv(JAVA_HOME="C:\\Java\\i586\\jre6\\bin")
find.java()
install.packages("swirl")
library("swirl")
ls()
rm(list=ls())
swirl()
swirl()
source("run_analysis.R")
setwd("~/R/UCI HAR Dataset")
source("run_analysis.R")
View(cleaned)
View(result)
View(cleaned)
x<-rnorm(100, 50, 20)
hist(x)
quantile(x)
quantile(x, c(0.3,0.8))
set.seed(1)
quantile(x)
xt <- xtabs(Jumlah.Kes.Terkumpul)
xt<-xtabs(Jumlah.Kes.Terkumpul)
t<-xtabs(Jumlah.Kes.Terkumpul ~ Negeri+Daerah.Zon.PBT, data = data)
data$group <- cut(data$Jumlah.Kes.Terkumpul, breaks=4)
url<- "http://data.gov.my/folders/MOH/MOH_denggue_HOTSPOT_2010_2014_v3.xlsx"
download.file(url,destfile="dengue_2010-2015.xlsx",mode="wb")
list.files()
library(xlsx)
install.packages("xlsx")
library(xlsx)
data<-read.xlsx("dengue_2010-2015.xlsx", sheetIndex=1, header=TRUE)
dim(data)
str(data)
summary(data)
set.seed(1)
x <-data.frame("var1"=sample(1:5),
"var2"=sample(6:10),"var3"=sample(11:15))
x$var2[c(1,3)] <- NA
x
x[,1]
x[1:2, "var2"]
x[x$var1<=3 & x$var3 >10,]
x[x$var1>2| x$var3 >10,]
x[x$var2>1]
x[x$var2>1,]
x[which(x$var2>1),]
x[which.max(x$var1),]
sort(x$var1)
sort(x$var1,decreasing=TRUE)
sort(x$var2,na.last=TRUE)
x[order(x$var1),]
x[order(x$var1, x$var3),]
library(plyr)
arrange(x, varl)
arrange(x, var1)
arrange(x, desc(var1))
x<-rnorm(100, 50, 20)
hist(x)
quantile(x)
quantile(x, c(0.3,0.8))
x<-rnorm(100, 50,20)
hist(x)
quantile(x)
quantile(x, c(0.3,0.8))
xt<-xtabs(Jumlah.Kes.Terkumpul ~
Negeri+Daerah.Zon.PBT, data = data)
xt<-xtabs(Jumlah.Kes.Terkumpul ~ Negeri+Daerah.Zon.PBT, data = data)
xt
barplot(xt)
data$group <- cut(data$Jumlah.Kes.Terkumpul, breaks=4)
View(data)
dt.split.1<- split(data, data$Negeri)
dt.split.1<- split(data, data$Negeri)
dt.split.2 <- split(data$Jumlah.Kes.Terkumpul, data$Negeri)
lapply(dt.split.2, sum)
out <- tapply(data$Jumlah.Kes.Terkumpul, data$Daerah.Zon.PBT, sum)
barplot(out)
set.seed(1)
x<- sample(1:20,10)
y<- sample(30:50,10)
dt.1 <- data.frame(x,y)
set.seed(2)
x<- sample(1:20,10)
y<- sample(30:50,10)
dt.2 <- data.frame(x,y)
merge(dt.1, dt.2, by="x")
merge(dt.1, dt.2, by="x", all=TRUE)
merge(dt.1, dt.2, by=c("x", "y"))
url<-"http://data.gov.my/folders/KKM/LokalitiHotspot2015.xlsx"
download.file(url,"dengue_2015.xlsx",mode='wb')
dt <- read.xlsx("dengue_2015.xlsx", sheetIndex=1, header=TRUE)
dt <- read.csv("dengue_2015.csv")
names(dt)
dt$Lokaliti <- gsub("Lndah", "Indah", dt$Lokaliti)
names(dt) <- gsub(".", "", names(dt), fixed=TRUE)
names(dt)
grep("Taman",dt$Lokaliti)
grep("Taman",dt$Lokaliti, value=TRUE)
dt$Lokaliti[grep("Taman",dt$Lokaliti)]
length(grep("Taman",dt$Lokaliti)
grepl()
cnt <- table(grepl("Taman",dt$Lokaliti))
barplot(cnt)
dt_Taman <- dt[grepl("Taman",dt$Lokaliti),]
names(dt_Taman)
dt[grepl(“Taman|Tmn”,dt$Lokaliti),]
dt[grepl("Taman|Tmn",dt$Lokaliti),]
dt[grep("^T(.*)1",dt$Lokaliti),"Lokaliti"]
d1 <- Sys.Date()
format(d1, "%a %b %d")
x <- "15July2015"
z <- as.Date(x, "%d%b%Y")
weekdays(z)
months(z)
julian(z)
library(lubridate)
install.packages("lubridate")
library(lubridate)
ymd("20150715")
mdy("07/15/2015")
dmy("15/07/2015")
ymd_hms("2015-07-15 18:47:00")
wday(z)
wday(z, label=TRUE)
